{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getPlayer","playerCount","Math","floor","random","play","initialBalance","logger","a","balances","times","push","iterations","compact","length","player1Index","player2Index","balance1","balance2","newP1Balance","newP2Balance","join","App","React","useState","numberOfPlayers","setNumberOfPlayers","startingBalance","setStartingBalance","logs","setLogs","isRunning","setIsRunning","logStr","prevLogs","takeRight","startGame","Container","className","Row","Col","md","xs","InputGroup","Prepend","Text","FormControl","value","onChange","event","target","Button","disabled","onClick","Card","Body","Title","map","log","id","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b966c903.chunk.js","sourcesContent":["import compact from 'lodash/fp/compact';\nimport takeRight from 'lodash/takeRight';\nimport times from 'lodash/times';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.scss';\n\n/**\n * coin toss to see who will give the other money\n *\n * @param {number} balance1\n * @param {number} balance2\n * @return {number[]}\n */\nconst makeTrade = (balance1, balance2) => {\n  if (Math.random() >= 0.5) return [balance1 + 1, balance2 - 1];\n\n  return [balance1 - 1, balance2 + 1];\n};\n\nconst getPlayer = (playerCount) => Math.floor(Math.random() * playerCount);\n\nconst play = async (playerCount, initialBalance, logger) => {\n  const balances = [];\n  times(playerCount, () => balances.push(initialBalance));\n\n  let iterations = 0;\n\n  while (compact(balances).length > 1) {\n    iterations +=1;\n    let player1Index = getPlayer(playerCount);\n    while (balances[player1Index] === 0) {\n      player1Index = getPlayer(playerCount);\n    }\n\n    let player2Index = player1Index;\n    while ((player1Index === player2Index) || (balances[player2Index] === 0)) {\n      player2Index = getPlayer(playerCount);\n    }\n    const [newP1Balance, newP2Balance] = makeTrade(balances[player1Index], balances[player2Index]);\n    balances[player1Index] = newP1Balance;\n    balances[player2Index] = newP2Balance;\n\n    logger(balances.join(', '));\n  }\n\n  logger(`Game ends after ${iterations} turns.`);\n};\n\n\nconst App = () => {\n  const [numberOfPlayers, setNumberOfPlayers] = React.useState(10);\n  const [startingBalance, setStartingBalance] = React.useState(10);\n  const [logs, setLogs] = React.useState([]);\n  const [isRunning, setIsRunning] = React.useState(false);\n\n  const logger = (logStr) => setLogs((prevLogs) => takeRight([...prevLogs, logStr], 10));\n\n  const handleNumberOfPlayersChange = (event) => {\n    const { value } = event.target;\n    setNumberOfPlayers(+value);\n  };\n\n  const startGame = async () => {\n    setIsRunning(true);\n    setLogs([]);\n    await play(numberOfPlayers, startingBalance, logger);\n    setIsRunning(false);\n  };\n\n  const handleStartingBalanceChange = (event) => {\n    const { value } = event.target;\n    setStartingBalance(+value);\n  };\n\n  return (\n    <Container className=\"app\">\n      <Row>\n        <Col md={6} xs={12}>\n          <Row>\n            <Col>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>Number of Players</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={numberOfPlayers} onChange={handleNumberOfPlayersChange} />\n              </InputGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>Starting Balance</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl value={startingBalance} onChange={handleStartingBalanceChange} />\n              </InputGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"pull-right\">\n              <Button disabled={isRunning} onClick={startGame}>Start</Button>\n            </Col>\n          </Row>\n        </Col>\n\n        <Col md={6} xs={12}>\n          <Card>\n            <Card.Body>\n              <Card.Title>Game Description</Card.Title>\n              <ul>\n                <li>Given {numberOfPlayers} players, each player has ${startingBalance} initially.</li>\n                <li>Each turn, select 2 random players with balance more than 0.</li>\n                <li>Flip a coin, tail will give head $1.</li>\n                <li>Game ends when all money are converged into a player.</li>\n              </ul>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Card.Title>Game Progress</Card.Title>\n              <div className=\"progress-log\">\n                {logs.map((log, id) => <div key={id}>{log}</div>)}\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}